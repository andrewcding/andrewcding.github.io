var h=63710088e-1,S={centimeters:h*100,centimetres:h*100,degrees:360/(2*Math.PI),feet:h*3.28084,inches:h*39.37,kilometers:h/1e3,kilometres:h/1e3,meters:h,metres:h,miles:h/1609.344,millimeters:h*1e3,millimetres:h*1e3,nauticalmiles:h/1852,radians:1,yards:h*1.0936};function E(t,i,r={}){const e={type:"Feature"};return(r.id===0||r.id)&&(e.id=r.id),r.bbox&&(e.bbox=r.bbox),e.properties=i||{},e.geometry=t,e}function C(t,i,r={}){if(!t)throw new Error("coordinates is required");if(!Array.isArray(t))throw new Error("coordinates must be an Array");if(t.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!L(t[0])||!L(t[1]))throw new Error("coordinates must contain numbers");return E({type:"Point",coordinates:t},i,r)}function B(t,i,r={}){if(t.length<2)throw new Error("coordinates must be an array of two or more positions");return E({type:"LineString",coordinates:t},i,r)}function T(t,i="kilometers"){const r=S[i];if(!r)throw new Error(i+" units is invalid");return t*r}function U(t,i="kilometers"){const r=S[i];if(!r)throw new Error(i+" units is invalid");return t/r}function G(t){return t%(2*Math.PI)*180/Math.PI}function g(t){return t%360*Math.PI/180}function L(t){return!isNaN(t)&&t!==null&&!Array.isArray(t)}function P(t){if(!t)throw new Error("coord is required");if(!Array.isArray(t)){if(t.type==="Feature"&&t.geometry!==null&&t.geometry.type==="Point")return[...t.geometry.coordinates];if(t.type==="Point")return[...t.coordinates]}if(Array.isArray(t)&&t.length>=2&&!Array.isArray(t[0])&&!Array.isArray(t[1]))return[...t];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function D(t){return t.type==="Feature"?t.geometry:t}function R(t,i,r={}){if(r.final===!0)return F(t,i);const e=P(t),n=P(i),s=g(e[0]),o=g(n[0]),l=g(e[1]),a=g(n[1]),f=Math.sin(o-s)*Math.cos(a),u=Math.cos(l)*Math.sin(a)-Math.sin(l)*Math.cos(a)*Math.cos(o-s);return G(Math.atan2(f,u))}function F(t,i){let r=R(i,t);return r=(r+180)%360,r}function J(t,i,r,e={}){const n=P(t),s=g(n[0]),o=g(n[1]),l=g(r),a=U(i,e.units),f=Math.asin(Math.sin(o)*Math.cos(a)+Math.cos(o)*Math.sin(a)*Math.cos(l)),u=s+Math.atan2(Math.sin(l)*Math.sin(a)*Math.cos(o),Math.cos(a)-Math.sin(o)*Math.sin(f)),c=G(u),y=G(f);return C([c,y],e.properties)}function q(t,i,r={}){var e=P(t),n=P(i),s=g(n[1]-e[1]),o=g(n[0]-e[0]),l=g(e[1]),a=g(n[1]),f=Math.pow(Math.sin(s/2),2)+Math.pow(Math.sin(o/2),2)*Math.cos(l)*Math.cos(a);return T(2*Math.atan2(Math.sqrt(f),Math.sqrt(1-f)),r.units)}function K(t,i,r={}){const n=D(t).coordinates;let s=0;for(let o=0;o<n.length&&!(i>=s&&o===n.length-1);o++)if(s>=i){const l=i-s;if(l){const a=R(n[o],n[o-1])-180;return J(n[o],l,a,r)}else return C(n[o])}else s+=q(n[o],n[o+1],r);return C(n[n.length-1])}function N(t,i,r){if(t!==null)for(var e,n,s,o,l,a,f,u=0,c=0,y,p=t.type,M=p==="FeatureCollection",m=p==="Feature",A=M?t.features.length:1,w=0;w<A;w++){f=M?t.features[w].geometry:m?t.geometry:t,y=f?f.type==="GeometryCollection":!1,l=y?f.geometries.length:1;for(var k=0;k<l;k++){var v=0,b=0;if(o=y?f.geometries[k]:f,o!==null){a=o.coordinates;var d=o.type;switch(u=0,d){case null:break;case"Point":if(i(a,c,w,v,b)===!1)return!1;c++,v++;break;case"LineString":case"MultiPoint":for(e=0;e<a.length;e++){if(i(a[e],c,w,v,b)===!1)return!1;c++,d==="MultiPoint"&&v++}d==="LineString"&&v++;break;case"Polygon":case"MultiLineString":for(e=0;e<a.length;e++){for(n=0;n<a[e].length-u;n++){if(i(a[e][n],c,w,v,b)===!1)return!1;c++}d==="MultiLineString"&&v++,d==="Polygon"&&b++}d==="Polygon"&&v++;break;case"MultiPolygon":for(e=0;e<a.length;e++){for(b=0,n=0;n<a[e].length;n++){for(s=0;s<a[e][n].length-u;s++){if(i(a[e][n][s],c,w,v,b)===!1)return!1;c++}b++}v++}break;case"GeometryCollection":for(e=0;e<o.geometries.length;e++)if(N(o.geometries[e],i)===!1)return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function O(t,i){var r,e,n,s,o,l,a,f,u,c,y=0,p=t.type==="FeatureCollection",M=t.type==="Feature",m=p?t.features.length:1;for(r=0;r<m;r++){for(l=p?t.features[r].geometry:M?t.geometry:t,f=p?t.features[r].properties:M?t.properties:{},u=p?t.features[r].bbox:M?t.bbox:void 0,c=p?t.features[r].id:M?t.id:void 0,a=l?l.type==="GeometryCollection":!1,o=a?l.geometries.length:1,n=0;n<o;n++){if(s=a?l.geometries[n]:l,s===null){if(i(null,y,f,u,c)===!1)return!1;continue}switch(s.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":{if(i(s,y,f,u,c)===!1)return!1;break}case"GeometryCollection":{for(e=0;e<s.geometries.length;e++)if(i(s.geometries[e],y,f,u,c)===!1)return!1;break}default:throw new Error("Unknown Geometry Type")}}y++}}function W(t,i){O(t,function(r,e,n,s,o){var l=r===null?null:r.type;switch(l){case null:case"Point":case"LineString":case"Polygon":return i(E(r,n,{bbox:s,id:o}),e,0)===!1?!1:void 0}var a;switch(l){case"MultiPoint":a="Point";break;case"MultiLineString":a="LineString";break;case"MultiPolygon":a="Polygon";break}for(var f=0;f<r.coordinates.length;f++){var u=r.coordinates[f],c={type:a,coordinates:u};if(i(E(c,n),e,f)===!1)return!1}})}function z(t,i){W(t,function(r,e,n){var s=0;if(r.geometry){var o=r.geometry.type;if(!(o==="Point"||o==="MultiPoint")){var l,a=0,f=0,u=0;if(N(r,function(c,y,p,M,m){if(l===void 0||e>a||M>f||m>u){l=c,a=e,f=M,u=m,s=0;return}var A=B([l,c],r.properties);if(i(A,e,n,m,s)===!1)return!1;s++,l=c})===!1)return!1}}})}function H(t,i,r){var e=r,n=!1;return z(t,function(s,o,l,a,f){n===!1&&r===void 0?e=s:e=i(e,s,o,l,a,f),n=!0}),e}function Q(t,i={}){return H(t,(r,e)=>{const n=e.geometry.coordinates;return r+q(n[0],n[1],i)},0)}export{K as a,Q as l};
